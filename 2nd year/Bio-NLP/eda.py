# -*- coding: utf-8 -*-
"""eda.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YqyUKa4P9BxbGlBZzwAJbheb1osGJxhG
"""

import matplotlib.pyplot as plt

#plots for counting labels in dataset 
labels=[0,1,2,3]

qs=[]
l=[]

for i in range(1,22):
    
    if i==16 or i==18:
        continue
    else:
        x = list(answers[i])
        qs.append(x)
        l.append(i)
        

plt.figure(figsize=(25,15))

plt.hist(qs, bins=[-0.5,0.5,1.5,2.5,3.5],edgecolor='black',label=l)

plt.xticks(labels)
        
plt.xlabel("Answer")
        
plt.ylabel("No. of answers")
plt.legend(loc='upper right')

plt.show()


labels=["0", "1a", "1b", "2a", "2b","3a", "3b"]

x = list(answers[16])
y = list(answers[19])

bins=[-0.5,0.5,1.5,2.5,3.5,4.5,5.5,6.5]

plt.figure(figsize=(25,15))

plt.hist([x, y], bins, edgecolor='black',label=['16', '19'])
plt.legend(loc='upper right')
plt.xlabel("Answer")
        
plt.ylabel("No. of answers")
plt.show()

#get statistics about users, titles and posts
titles = []
posts = []
for key in dfs.keys():
    titles.append(dfs[key].count()["TITLE"])
    posts .append(dfs[key].count()["TEXT"])

print(sum(titles), max(titles), min(titles), np.mean(titles))

print(sum(posts), max(posts), min(posts), np.mean(posts))

avgs = []
for key in dfs.keys():
    lengths = [] 
    
    column = dfs[key].loc[:,"TEXT"]
    
    column = column[column.notnull()]
    
    for text in column:
        lengths.append(len(text.split()))
    
    avgs.append(np.mean(lengths))

print(np.mean(avgs))

avgs = []
for key in dfs.keys():
    lengths = [] 
    
    column = dfs[key].loc[:,"TITLE"]
    
    column = column[column.notnull()]
    
    for text in column:
        lengths.append(len(text.split()))
    
    avgs.append(np.mean(lengths))
    
print(avgs)

avgsclean = [x for x in avgs if str(x) != 'nan']

print(np.mean(avgsclean))

#stats about happy and sad emojis

count_tot = 0
for key in dfs.keys():
    count_sub=0
    for value in dfs[key]['new'].values:
        main_string = value
        sub_string = ":)"
        s="(:"
        ss=":-)"
        count_er=0
        start_index=0
        start_indexs=0
        start_indexss=0
        for i in range(len(main_string)):
            j = main_string.find(sub_string,start_index)
            k = main_string.find(s,start_indexs)
            l = main_string.find(ss,start_indexss)
            if(j!=-1):
                start_index = j+1
                count_er+=1
            if(k!=-1):
                start_indexs = k+1
                count_er+=1
            if(l!=-1):
                start_indexss = l+1
                count_er+=1
        count_sub = count_sub + count_er
    count_tot = count_tot + count_sub
print("total", count_tot)

count_tot = 0
for key in dfs.keys():
    count_sub=0
    for value in dfs[key]['new'].values:
        main_string = value
        sub_string = ":("
        s="):"
        ss=":-("
        count_er=0
        start_index=0
        start_indexs=0
        start_indexss=0
        for i in range(len(main_string)):
            j = main_string.find(sub_string,start_index)
            k = main_string.find(s,start_indexs)
            l = main_string.find(ss,start_indexss)
            if(j!=-1):
                start_index = j+1
                count_er+=1
            if(k!=-1):
                start_indexs = k+1
                count_er+=1
            if(l!=-1):
                start_indexss = l+1
                count_er+=1
        count_sub = count_sub + count_er
    count_tot = count_tot + count_sub
print("total", count_tot)